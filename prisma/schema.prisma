// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  first_name     String
  last_name      String
  email          String   @unique
  password_hash  String
  pseudo         String
  pseudo_id      Int
  role           String   @default("guest")
  avatar         String
  activate_token String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Order          Order[]
  Review         Review[]
}

model Order {
  id                String              @id @default(uuid())
  status            String              @default("pending")
  // si l'utilisateur a déjà un autre "Order" en "pending", il recevra un message d'avertissement avec le contenu de son ancien Order, qu'il pourra éditer, transférer ou supprimer
  user_id           String
  user              User                @relation(fields: [user_id], references: [id])
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  Order_has_Product Order_has_Product[]
}

model Product {
  id                String              @id @default(uuid())
  name              String              @unique
  image             String
  description       String
  price             Float
  stock             Int
  promo             Float               @default(0)
  category_id       String
  category          Category            @relation(fields: [category_id], references: [id])
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  Review            Review[]
  Order_has_Product Order_has_Product[]
}

model Review {
  id         String   @id @default(uuid())
  rating     Int
  comment    String
  user_id    String
  product_id String
  user       User     @relation(fields: [user_id], references: [id])
  product    Product  @relation(fields: [product_id], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  image     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

model Order_has_Product {
  id         String   @id @default(uuid())
  quantity   Int
  product_id String
  order_id   String
  order      Order    @relation(fields: [order_id], references: [id])
  product    Product  @relation(fields: [product_id], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
